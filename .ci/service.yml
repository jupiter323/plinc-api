AWSTemplateFormatVersion: 2010-09-09

Transform: 'AWS::Serverless-2016-10-31'

Description: |
  Plinc API DEV

Parameters:
  Project:
    Type: String
    MinLength: 3
    AllowedPattern: '[a-zA-Z]+'
    ConstraintDescription: |
      Only alphanumerical characters are allowed.
    Description: |
      The name of the project being deployed.

  KeyAccessPolicy:
    Type: AWS::SSM::Parameter::Value<String>
    Description: |
      The managed IAM access policy providing encryption and decryption
      access to the KMS key.

  UserPoolId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /plinc/Foundations/Cognito/UserPoolId
    Description: |
      Arn of the Plinc User Pool in Cognito

  ListsTableName:
    Type: String
    MinLength: 3
    Description: |
      The name of the lists table in DynamoDB

  ItemsTableName:
    Type: String
    MinLength: 3
    Description: |
      The name of the items table in DynamoDB

  UsersTableName:
    Type: String
    MinLength: 3
    Description: |
      The name of the users table in DynamoDB

  DownVotesTableName:
    Type: String
    MinLength: 3
    Description: |
      The name of the downvotes table in DynamoDB

  FollowsTableName:
    Type: String
    MinLength: 3
    Description: |
      The name of the follows table in DynamoDB

  DefinitionKey:
    Type: String
    MinLength: 3
    Description: |
      The S3 location of the OpenApi spec

Globals:
  Api:
    Cors: "'*'"

Resources:
  PlincApiDevRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: InvokeLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action: 'sts:AssumeRole'

  PlincApiDev:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: !Ref DefinitionKey
      Cors:
        AllowHeaders: "'content-type,authorization,x-amz-date,x-amz-security-token,x-requested-with'"
        AllowOrigin: "'*'"
        AllowCredentials: false
        MaxAge: "'3600'"

  Lists:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref ListsTableName
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: ListId
          AttributeType: S
        - AttributeName: Possessor
          AttributeType: S
      KeySchema:
        - AttributeName: Possessor
          KeyType: HASH
        - AttributeName: ListId
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: OLD_IMAGE

  Items:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref ItemsTableName
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: ListId
          AttributeType: S
        - AttributeName: ItemId
          AttributeType: S
      KeySchema:
        - AttributeName: ListId
          KeyType: HASH
        - AttributeName: ItemId
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  Users:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref UsersTableName
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: Possessor
          AttributeType: S
      KeySchema:
        - AttributeName: Possessor
          KeyType: HASH
        - AttributeName: UserId
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: OLD_IMAGE

  DownVotes:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DownVotesTableName
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: DownVoteId
          AttributeType: S
        - AttributeName: Possessor
          AttributeType: S
      KeySchema:
        - AttributeName: Possessor
          KeyType: HASH
        - AttributeName: DownVoteId
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: OLD_IMAGE

  Follows:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref FollowsTableName
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: FollowUser
          AttributeType: S
        - AttributeName: Possessor
          AttributeType: S
      KeySchema:
        - AttributeName: Possessor
          KeyType: HASH
        - AttributeName: FollowUser
          KeyType: RANGE

  CreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/lists/handler.create
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:PutItem
            Effect: Allow
            Resource: !GetAtt Lists.Arn
      Environment:
        Variables:
          LISTS_TABLE_NAME: !Ref ListsTableName

  CreateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/items/handler.create
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:PutItem
            Effect: Allow
            Resource: !GetAtt Items.Arn
      Environment:
        Variables:
          ITEMS_TABLE_NAME: !Ref ItemsTableName

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/users/handler.create
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:PutItem
            Effect: Allow
            Resource: !GetAtt Users.Arn
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName

  CreateDownVoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/downVotes/handler.create
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:PutItem
            Effect: Allow
            Resource: !GetAtt DownVotes.Arn
      Environment:
        Variables:
          DOWNVOTES_TABLE_NAME: !Ref DownVotesTableName

  CreateFollowFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/follows/handler.create
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:PutItem
            Effect: Allow
            Resource: !GetAtt Follows.Arn
      Environment:
        Variables:
          FOLLOWS_TABLE_NAME: !Ref FollowsTableName

  UserStreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/users/stream.handler
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:DescribeStream
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:ListStreams
              - dynamodb:Query
              - dynamodb:DeleteItem
            Effect: Allow
            Resource: '*'
        - Statement:
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
      Environment:
        Variables:
          LISTS_TABLE_NAME: !Ref ListsTableName
          DOWNVOTES_TABLE_NAME: !Ref DownVotesTableName

  UserTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn:
        Fn::GetAtt: [Users, StreamArn]
      FunctionName:
        Fn::GetAtt: [UserStreamFunction, Arn]
      StartingPosition: LATEST

  GetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/lists/handler.get
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:GetItem
            Effect: Allow
            Resource: !GetAtt Lists.Arn
      Environment:
        Variables:
          LISTS_TABLE_NAME: !Ref ListsTableName

  GetAllFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/lists/handler.getAll
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:Query
            Effect: Allow
            Resource: !GetAtt Lists.Arn
      Environment:
        Variables:
          LISTS_TABLE_NAME: !Ref ListsTableName

  GetAllUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/users/handler.getAll
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:Scan
            Effect: Allow
            Resource: !GetAtt Users.Arn
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName

  GetAllDownVotesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/downVotes/handler.getAll
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:Query
            Effect: Allow
            Resource: !GetAtt DownVotes.Arn
      Environment:
        Variables:
          DOWNVOTES_TABLE_NAME: !Ref DownVotesTableName

  GetAllFollowsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/follows/handler.getAll
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:Query
            Effect: Allow
            Resource: !GetAtt Follows.Arn
      Environment:
        Variables:
          FOLLOWS_TABLE_NAME: !Ref FollowsTableName

  GetAllFollowersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/follows/handler.getFollowers
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:Scan
            Effect: Allow
            Resource: !GetAtt Follows.Arn
      Environment:
        Variables:
          FOLLOWS_TABLE_NAME: !Ref FollowsTableName

  GetUserIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/users/handler.getUserId
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:Query
            Effect: Allow
            Resource: !GetAtt Users.Arn
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/users/handler.get
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:GetItem
            Effect: Allow
            Resource: !GetAtt Users.Arn
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName

  DeleteListFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/lists/handler.delete
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:DeleteItem
            Effect: Allow
            Resource: !GetAtt Lists.Arn
      Environment:
        Variables:
          LISTS_TABLE_NAME: !Ref ListsTableName

  DeleteDownVoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/downVotes/handler.delete
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:DeleteItem
            Effect: Allow
            Resource: !GetAtt DownVotes.Arn
      Environment:
        Variables:
          DOWNVOTES_TABLE_NAME: !Ref DownVotesTableName

  DeleteFollowFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/follows/handler.delete
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:DeleteItem
            Effect: Allow
            Resource: !GetAtt Follows.Arn
      Environment:
        Variables:
          FOLLOWS_TABLE_NAME: !Ref FollowsTableName

  UpdateListFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/lists/handler.update
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:PutItem
            Effect: Allow
            Resource: !GetAtt Lists.Arn
      Environment:
        Variables:
          LISTS_TABLE_NAME: !Ref ListsTableName

  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/users/handler.update
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:PutItem
            Effect: Allow
            Resource: !GetAtt Users.Arn
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName

  ListStreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/lists/stream.handler
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:DescribeStream
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:ListStreams
              - dynamodb:Query
              - dynamodb:DeleteItem
            Effect: Allow
            Resource: '*'
        - Statement:
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
      Environment:
        Variables:
          ITEMS_TABLE_NAME: !Ref ItemsTableName

  ListTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn:
        Fn::GetAtt: [Lists, StreamArn]
      FunctionName:
        Fn::GetAtt: [ListStreamFunction, Arn]
      StartingPosition: LATEST

  GetAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/items/handler.getAll
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:Query
            Effect: Allow
            Resource: !GetAtt Items.Arn
      Environment:
        Variables:
          ITEMS_TABLE_NAME: !Ref ItemsTableName

  DeleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/items/handler.delete
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:DeleteItem
            Effect: Allow
            Resource: !GetAtt Items.Arn
      Environment:
        Variables:
          ITEMS_TABLE_NAME: !Ref ItemsTableName

  ItemStreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: src/items/stream.handler
      CodeUri: ../dist/package
      Policies:
        - !Ref KeyAccessPolicy
        - AWSLambdaBasicExecutionRole
        - Statement:
            Action:
              - dynamodb:UpdateItem
              - dynamodb:PutItem
            Effect: Allow
            Resource: !GetAtt Lists.Arn
        - Statement:
            Action:
              - dynamodb:DescribeStream
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:ListStreams
              - dynamodb:GetItem
              - dynamodb:Query
            Effect: Allow
            Resource: '*'
        - Statement:
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
      Environment:
        Variables:
          LISTS_TABLE_NAME: !Ref ListsTableName
          ITEMS_TABLE_NAME: !Ref ItemsTableName

  ItemTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn:
        Fn::GetAtt: [Items, StreamArn]
      FunctionName:
        Fn::GetAtt: [ItemStreamFunction, Arn]
      StartingPosition: LATEST

  CreateLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CreateFunction}'
      RetentionInDays: 1

  CreateItemLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CreateItemFunction}'
      RetentionInDays: 1

  CreateDownVoteLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CreateDownVoteFunction}'
      RetentionInDays: 1

  CreateFollowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CreateFollowFunction}'
      RetentionInDays: 1

  CreateUserLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CreateUserFunction}'
      RetentionInDays: 1

  GetLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetFunction}'
      RetentionInDays: 1

  GetAllLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetAllFunction}'
      RetentionInDays: 1

  GetAllUsersLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetAllUsersFunction}'
      RetentionInDays: 1

  GetAllDownVotesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetAllDownVotesFunction}'
      RetentionInDays: 1

  GetAllFollowsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetAllFollowsFunction}'
      RetentionInDays: 1

  GetAllFollowersLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetAllFollowersFunction}'
      RetentionInDays: 1

  GetUserIdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetUserIdFunction}'
      RetentionInDays: 1

  GetUserLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetUserFunction}'
      RetentionInDays: 1

  GetAllItemsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetAllItemsFunction}'
      RetentionInDays: 1

  DeleteDownVoteLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${DeleteDownVoteFunction}'
      RetentionInDays: 1

  DeleteFollowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${DeleteFollowFunction}'
      RetentionInDays: 1

  ItemStreamFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ItemStreamFunction}'
      RetentionInDays: 1

  UpdateListFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${UpdateListFunction}'
      RetentionInDays: 1

  UpdateUserFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${UpdateUserFunction}'
      RetentionInDays: 1

  ApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Transform:
          Name: ParameterPrefix
          Parameters:
            Project: !Ref Project
            Key: ApiUrl
      Value: !Sub 'https://${PlincApiDev}.execute-api.${AWS::Region}.amazonaws.com/prod'

Outputs:
  ApiUrl:
    Description: 'Plinc API URL'
    Value: !Sub 'https://${PlincApiDev}.execute-api.${AWS::Region}.amazonaws.com/prod'
