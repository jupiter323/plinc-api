swagger: '2.0'

info:
  title: Plinc API
  description: Use this API to retrieve wish lists and items for Plinc.app
  version: 0.0.1

host: d183zg341i.execute-api.us-east-1.amazonaws.com
basePath: /prod
schemes:
  - https

securityDefinitions:
  $ref: ./security.yml

x-amazon-apigateway-gateway-responses:
  $ref: ./gateway/responses.yml

x-amazon-apigateway-request-validators:
  $ref: ./gateway/validators.yml

x-amazon-apigateway-request-validator: all

paths:
  /lists:
    post:
      summary: Create a list
      tags:
        - Lists
      description: Create a list for the current logged in user.
      parameters:
        - in: body
          name: list
          description: list to be created
          schema:
            $ref: '#/definitions/List'
      responses:
        201:
          description: Created
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
        403:
          description: Access Denied
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${CreateFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

    get:
      summary: Get lists
      tags:
        - Lists
      description: Get all lists for the current logged in user.
      responses:
        201:
          description: Created
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
        403:
          description: Access Denied
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${GetAllFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /lists/{id}:
    get:
      summary: Get list
      tags:
        - Lists
      description: Get a single list for a user
      parameters:
        - name: id
          in: path
          description: id of the list to get
          required: true
          type: string
      responses:
        200:
          description: Found
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${GetFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

    put:
      summary: Update list
      tags:
        - Lists
      description: Update a single list for a user
      parameters:
        - name: id
          in: path
          description: id of the list to get
          required: true
          type: string
        - name: list
          in: body
          description: list to be updated
          schema:
            $ref: '#/definitions/List'
      responses:
        200:
          description: Found
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${UpdateListFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

    delete:
      summary: Deletes a list
      tags:
        - Lists
      description: Deletes a list.
      parameters:
        - name: id
          in: path
          description: id of the list
          required: true
          type: string
      responses:
        200:
          description: Found
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
        403:
          description: Access Denied
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${DeleteListFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /lists/otheruser/{possessor}:
    get:
      summary: Get lists for otheruser
      tags:
        - Lists
      description: Get lists for other user
      parameters:
        - name: possessor
          in: path
          description: id of the otheruser to get
          required: true
          type: string
      responses:
        200:
          description: Found
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${GetAllFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /items:
    post:
      summary: Create a item
      tags:
        - Items
      description: Create a item for the current logged in user.
      parameters:
        - in: body
          name: item
          description: item to be created
          schema:
            $ref: '#/definitions/Item'
      responses:
        201:
          description: Created
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
        403:
          description: Access Denied
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${CreateItemFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /list/{listId}/items:
    get:
      summary: Get items for a list
      tags:
        - Items
      description: Get all items for a given list.
      parameters:
        - name: listId
          in: path
          description: id of the list to get items for
          required: true
          type: string
      responses:
        200:
          description: Found
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
        403:
          description: Access Denied
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${GetAllItemsFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /list/{listId}/items/{itemId}:
    delete:
      summary: Deletes an item from a list
      tags:
        - Items
      description: Deletes an item.
      parameters:
        - name: listId
          in: path
          description: id of the list the item belongs to
          required: true
          type: string
        - name: itemId
          in: path
          description: id of the item to delete
          required: true
          type: string
      responses:
        200:
          description: Found
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
        403:
          description: Access Denied
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${DeleteItemFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /users:
    post:
      summary: Create a user
      tags:
        - Users
      description: Create a user.
      parameters:
        - in: body
          name: user
          description: user to be created
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: Created
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
        403:
          description: Access Denied
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${CreateUserFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /search/{clientId}:
    get:
      summary: Get users
      tags:
        - Users
      description: Get all users.
      parameters:
        - name: clientId
          in: path
          description: client id of the user to get users for
          required: true
          type: string
      responses:
        200:
          description: Found
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
        403:
          description: Access Denied
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${GetAllUsersFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /user/id:
    get:
      summary: Get UserId
      tags:
        - Users
      description: Get user id for the current logged in user.
      responses:
        201:
          description: Found
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
        403:
          description: Access Denied
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${GetUserIdFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /users/{id}:
    get:
      summary: Get user
      tags:
        - Users
      description: Get an user
      parameters:
        - name: id
          in: path
          description: id of the user to get
          required: true
          type: string
      responses:
        200:
          description: Found
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${GetUserFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

    put:
      summary: Update user
      tags:
        - Users
      description: Update a single user
      parameters:
        - name: id
          in: path
          description: id of the user to get
          required: true
          type: string
        - name: user
          in: body
          description: user to be updated
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: Found
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${UpdateUserFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /downvotes:
    post:
      summary: Create a downvote
      tags:
        - DownVotes
      description: Create a downvote for the current logged in user.
      parameters:
        - in: body
          name: downVote
          description: downVote to be created
          schema:
            $ref: '#/definitions/DownVote'
      responses:
        201:
          description: Created
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
        403:
          description: Access Denied
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${CreateDownVoteFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

    get:
      summary: Get downvotes
      tags:
        - DownVotes
      description: Get all downvotes for the current logged in user.
      responses:
        201:
          description: Found
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
        403:
          description: Access Denied
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${GetAllDownVotesFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /downvotes/{id}:
    delete:
      summary: Deletes a downVote
      tags:
        - DownVotes
      description: Deletes a downVote.
      parameters:
        - name: id
          in: path
          description: id of the downVote
          required: true
          type: string
      responses:
        200:
          description: Found
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
        403:
          description: Access Denied
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${DeleteDownVoteFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /follows:
    post:
      summary: Create a follow
      tags:
        - Follows
      description: Create a follow for the current logged in user.
      parameters:
        - in: body
          name: follow
          description: follow to be created
          schema:
            $ref: '#/definitions/Follow'
      responses:
        201:
          description: Created
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
        403:
          description: Access Denied
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${CreateFollowFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

    get:
      summary: Get follows
      tags:
        - Follows
      description: Get all follows for the current logged in user.
      responses:
        201:
          description: Found
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
        403:
          description: Access Denied
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${GetAllFollowsFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /follows/{followUser}:
    get:
      summary: Get followers
      tags:
        - Follows
      description: Get all followers for the other user.
      parameters:
        - name: followUser
          in: path
          description: followUser of the follow
          required: true
          type: string
      responses:
        201:
          description: Found
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
        403:
          description: Access Denied
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${GetAllFollowersFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

    delete:
      summary: Deletes a follow
      tags:
        - Follows
      description: Deletes a follow.
      parameters:
        - name: followUser
          in: path
          description: followUser of the follow
          required: true
          type: string
      responses:
        200:
          description: Found
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
        403:
          description: Access Denied
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${DeleteFollowFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /follows/otheruser/{possessor}:
    get:
      summary: Get follows by other user
      tags:
        - Follows
      description: Get all follows for the other user.
      parameters:
        - name: possessor
          in: path
          description: possesor of the follow
          required: true
          type: string
      responses:
        201:
          description: Found
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
        403:
          description: Access Denied
          headers:
            Access-Control-Allow-Headers:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Origin:
              type: 'string'
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: 'POST'
        credentials:
          Fn::Sub: '${PlincApiDevRole.Arn}'
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${GetAllFollowsFunction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}:
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          5\d{2}:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

definitions:
  $ref: ./definitions.yml
